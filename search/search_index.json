{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#goal","title":"GOAL","text":"<p>The goal of this project is to refresh the Gemini V3 in a Voron V0.2 to \u2018as shipped\u2019 standard as per 01/09/23, with as few external links as possible. It's not perfect, but should get you up and printing again.</p> <p>This repo consists of 3 sections:</p> <ul> <li>Installation - This section will walk you thought how to refresh/reinstall the Fly Gemini V3 board on your Voron 0</li> <li>Updating - Updating your printer and extensions safely.</li> <li>Extras - Additional tutorials e.g. setting up the ADXL via SPI, camera etc.</li> </ul> <p>Files such as Gemini firmware and config files can be found in the repository</p>"},{"location":"extras/","title":"Extras","text":""},{"location":"extras/#adxl-via-spi","title":"ADXL via SPI","text":"<p>In some cases the ADXL via SPI won't work out of the box. We'll fix that :)</p> <p>1. First let's configure the adxl in config files. Edit <code>printer.cfg</code> and add the following:</p> <pre><code>[adxl345]\ncs_pin: host:None\n\n[resonance_tester]\naccel_chip: adxl345\nprobe_points: 60, 60, 20\n</code></pre> <p>2. Run <code>ACCELEROMETER_QUERY</code> in the fluidd/mainsail console to check if everything's working. The correct output look lke this:</p> <p></p> <p>If you're getting any errors, try running the command again as soon as possible after getting an error. If the problem persists there's a set of things that we can do.</p> <p>3. Let's check what SPI address are available by running <code>ls -la /dev/spi*</code></p> <p></p> <p>4. Update the <code>[adxl345]</code> config part by adding the <code>spi_bus: spidevX.X</code> according to the list you get from previous step and rerun <code>ACCELEROMETER_QUERY</code> command again:</p> <p>Replace the X.X with number you got from the <code>ls</code> command</p> <pre><code>[adxl345]\ncs_pin: host:None\nspi_bus: spidev1.0 # or spidev1.1\n</code></pre> <p>If you're still getting errors we need to edit the host OS file <code>/boot/armbianEnv.txt</code> and add spi-spidev overlay.</p> <p>For some strange reason using <code>armbian-config</code> doesn't seems to work. (You can try, though)</p> <p>5. Edit the armbinaEnv file by running</p> <pre><code>nano /boot/armbianEnv.txt\n</code></pre> <p>The file should look similar to like the one below.</p> <p></p> <p>We need to add two things just below the line that starts with phrase <code>overlays</code></p> <pre><code>param_spidev_spi_bus=1\noverlays=spi-spidev\n</code></pre> <p>The final file should look like this</p> <p></p> <p>Why I didn't put the file for you to copy? Because it can vary from board to board, so it's better to just add the lines in correct place.</p> <p>6. Redo the point 3 - you should get additional spi devices on the list</p> <p></p> <p>7. Redo the point 4. If everything went ok, you should be able to successfully check accelerometer status (look point 2)</p>"},{"location":"extras/#camera","title":"Camera","text":"<p>Look in crowsnest logs for something like video0 / video1 Change your <code>crowsnest.conf</code> to match the camera that has been detected as a camera</p> <p>API key location in Fluidd for Cura/Octoprint connection </p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#re-flashing-the-printer","title":"Re-Flashing The Printer","text":"<p>1. Format an SD card (16-32gb) via Disk Management in Windows</p> <p></p> <p>2. Get Raspberry Pi image tool https://www.raspberrypi.com/software/</p> <p></p> <p>3. Download and unpack the FLYOS image 7zip from above 'FLY-v3.1_Flygemini_bullseye_0819_5.10.85.img.7z' This came from Mellow</p> <p></p> <p>(version in screenshot works with Gemini V3 board)</p> <p>4a. Write this img file to the sd card via the Pi Image Tool, you don't need to add any wifi details etc yet.</p> <p>4b. Insert the sd card into the Gemini </p> <p>5. Plug board into computer via the bottom left USB C port, and open Device Manager and expand Ports (COM &amp; LPT), you should see a new COM port appear</p> <p></p> <p>6. Get PuTTY https://www.putty.org/ and set it up with your COM port like so</p> <p></p> <p>Give it a few seconds, You\u2019re in</p> <p>6b. If you're using a macOS (or unix based system) you don't need any additional program. You can use built-in command <code>screen</code></p> <p>Type below command in terminal to find the correct device.</p> <p><code>ls /dev/tty* | grep usbserial</code></p> <p>You should get something like </p> <p><code>crw-rw-rw-  1 root             wheel   0x9000006 Oct  7 22:47 /dev/tty.usbserial-xxxxx</code></p> <p>Then you just need to connect to the device using </p> <p><code>screen /dev/tty.usbserial-xxxxx 115200</code></p>"},{"location":"installation/#add-wifi","title":"Add wifi","text":"<p>7. Type nmtui into putty and press enter Use the arrow keys to navigate and enter for OK</p> <p></p> <p>7b. Select Activate a connection</p> <p>7c. Navigate to your wifi id, press enter, then type your password, and press enter again Your window should look like so:</p> <p></p> <p>7d. Press esc esc to back out of this menu</p> <p>7e. Type ip a and press enter Look for an ip similar to 192.168.1.85, copy this into your browser and you should see Fluidd</p> <p> Errors shown will be fixed during this document</p> <p>Ok, let's switch user and connect via wifi. Open a new putty instance, you can close the old window.</p> <p>8. Input the new details for the board</p> <p></p> <p>Once in the console, username \u2018fly\u2019 password \u2018mellow\u2019</p> <p></p> <p>9a. Cd klipper, make clean, make menuconfig </p> <p></p> <p>9b. Set the options like so</p> <p></p> <p>Press q then y to save and quit</p> <p>9c. Type <code>make -j4</code></p> <p></p> <p>10a. Remove diagonal jumper before the next step, we're going to flash the MCU (the right portion of the Gemini)</p> <p></p> <p>10b. Type the following into Putty</p> <p><code>wget -O gemini-tools_install.sh https://cdn.mellow.klipper.cn/Utils/gemini-tools/gemini-tools_install.sh &amp;&amp; sudo bash gemini-tools_install.sh gemini-v3-tools</code></p> <p>Type password when required</p> <p>10c. If you get hid-flash error type <code>cd ~/klipper/lib/hidflash &amp;&amp; make</code></p> <p>Else type <code>sudo gemini-v3-tools -f ~/klipper/out/klipper.bin</code></p> <p>10d. Type the following commands <code>sudo gemini-v3-tools -h</code></p> <p>this enters burning mode</p> <p><code>sudo gemini-v3-tools -s</code></p> <p>this starts MCU normally</p> <p><code>sudo gemini-v3-tools -r</code></p> <p>This resets the MCU </p> <p><code>ls /dev/serial/by-id/*</code></p> <p>10e. Grab the blue text like below</p> <p><code>/dev/serial/by-id/usb-Klipper_stm32f405xx........</code></p> <p>and put it in your printer.cfg </p>"},{"location":"installation/#mainsail-fix","title":"Mainsail fix","text":"<p>To fix the below, change the path to the virtual directory in mainsail, I did this by navigating to the config locations and editing them using Nano. There are easier ways of doing this, but this is how I did it.</p> <p></p> <pre><code>cd mainsail-config\nnano mainsail.cfg\n</code></pre> <p></p> <p>Scroll using arrow keys, change virtual sdcard to expected location CTRL+X to save, press Y, then enter</p> <p></p> <p>Do the same with ~/printer-data/mainsail/mainsail.cfg</p> <p>Do the same with printer.cfg but via Fluidd (because easier)</p> <p></p>"},{"location":"installation/#v0-display","title":"V0 display","text":"<p>Somewhat stolen from https://github.com/VoronDesign/Voron-Hardware/blob/master/V0_Display/Documentation/Setup_and_Flashing_Guide.md to have a version of documentation that won't change</p> <p>If your display is attached to the printer, turn it onto its side so you can see the underside of the display</p> <p>1. Install the boot jumper and press the reset button on the back of the display board. This will put the board into DFU mode.</p> <p></p> <p>2. Run <code>lsusb</code> from the command prompt</p> <p>Make sure you see an STM32 in DFU mode listed</p> <p>3. Run <code>dfu-util --list</code> from the command prompt, and it should say one DFU is available, make a note of the text inside the [xxxx:yyyy]</p> <p>4. Run <code>cd ~/klipper</code> from the command line to enter the Klipper directory</p> <p>5. Run <code>make menuconfig</code></p> <p>settings should be:</p> <p></p> <p>Pay attention to the PA9/PA10 comm setting, as if you get it wrong it won\u2019t work and show up in blue</p> <p>Set the \"Optional features\" to:</p> <p></p> <p>Hit Q to Exit and Save</p> <p>6. Run make clean to clean up the make environment.</p> <p>7. Run make flash FLASH_DEVICE=xxxx:yyyy (using xxxx:yyyy from above)</p> <p>You may see what appears to be an \"error\" after flashing your board. (Blue box) As long as you see the File downloaded successfully text (Green box) you are good to proceed.</p> <p>The error (Red box) seems to be caused by the controller immediately running the uploaded code and no longer appearing as a DFU device. This is not an issue, as long as the board reports a Klipper serial name. If you see an issue with space on the chip, it may be that you still have an item ticked on the optional features step.</p> <p></p> <p>8. Remove the boot jumper and press the reset button on the back of the display.</p> <p>After completion ls /dev/serial/by-id/* should return a device begining with /dev/serial/by-id/usb-Klipper_stm32f042x6...</p> <p>9. Copy this serial port name (/dev/serial/by-id/usb-Klipper_stm32f042x6... ) and place it in your [mcu display] section of the display config file.</p> <p>Your board should now be usable with Klipper. Use the example config files) to get started Best option is to copy the config file into the same directory as printer.cfg then add [include V0Display.cfg] to the end of your printer.cfg to include the file.</p>"},{"location":"updating/","title":"Updating","text":""},{"location":"updating/#updating-the-printer","title":"Updating the printer","text":"<p>1. Back up all your cfg files somewhere just in case</p> <p> </p> <p>2. recover any that require recovery</p> <p>Note: fluidd-config might not want to recover - This should fix itself later</p> <p></p> <p>3. Reboot host - This is to make sure the repos and installs are all in a safe state to update</p> <p></p> <p>4. Update OS Packages - this will take SEVERAL minutes</p> <p>5. Update Moonraker - also takes several minutes, Moonraker will then restart, give it a few minutes to settle.</p> <p>6. Update Fluidd</p> <p>7. Update Mainsail</p> <p>8. Update Crowsnest</p> <p>RESTART the host again</p> <p>8. Update klipper</p> <p>RESTART the host again</p> <p>If fluidd-config is still showing Invalid / Recover - click on another menu tab, or the home screen, then come back to the update screen. Then if it still doesn't show, wait about half an hour and do the same, Speculation below:</p> <p>Speculation: Every 30 minutes the Gemini backs up files, hence the reason if you don't shut down the machine correctly you can lose up to 30 minutes of changes. I believe fluidd-config may update from the backup at that time.</p> <p>This may explain being unable to update it, after many attempts at updating it in the UI and within the linux console it seemed fixed itself once I went to the home screen, then returned to the updates panel.</p> <p>I think my explanation is correct but without more testing or communication from the developer of the fluidd/mainsail install, I couldn't say for sure. I hope your updates page looks like this:</p> <p></p>"}]}